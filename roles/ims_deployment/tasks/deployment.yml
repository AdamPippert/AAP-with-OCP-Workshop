---
# Tasks for deployment management

- name: "Deploy IMS connector Deployment with idempotent configuration"
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: "{{ ims_deployment_app_name }}"
        namespace: "{{ ims_deployment_namespace }}"
        labels: "{{ ims_deployment_labels | combine({
          'app.kubernetes.io/name': ims_deployment_app_name,
          'app.kubernetes.io/version': ims_deployment_app_version,
          'app.kubernetes.io/component': 'application'
        }) }}"
        annotations: "{{ ims_deployment_annotations | combine({
          'deployment.kubernetes.io/revision': '1'
        }) }}"
      spec:
        replicas: "{{ ims_deployment_resource_specs[ims_deployment_environment].replicas }}"
        selector:
          matchLabels:
            app.kubernetes.io/name: "{{ ims_deployment_app_name }}"
            app.kubernetes.io/component: "application"
        template:
          metadata:
            labels:
              app.kubernetes.io/name: "{{ ims_deployment_app_name }}"
              app.kubernetes.io/version: "{{ ims_deployment_app_version }}"
              app.kubernetes.io/component: "application"
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/port: "8080"
              prometheus.io/path: "/actuator/prometheus"
          spec:
            serviceAccountName: "{{ ims_deployment_service_account }}"
            securityContext:
              runAsNonRoot: "{{ ims_deployment_security.run_as_non_root }}"
              runAsUser: "{{ ims_deployment_security.run_as_user }}"
              fsGroup: "{{ ims_deployment_security.fs_group }}"
            containers:
            - name: "{{ ims_deployment_app_name }}"
              image: "{{ ims_deployment_image.registry }}/{{ ims_deployment_image.repository }}:{{ ims_deployment_image.tag }}"
              imagePullPolicy: "{{ ims_deployment_image.pull_policy }}"
              ports:
              - containerPort: 8080
                name: http
                protocol: TCP
              env:
              - name: JAVA_OPTS
                value: "-Xms{{ ims_deployment_resource_specs[ims_deployment_environment].memory_request }} -Xmx{{ ims_deployment_resource_specs[ims_deployment_environment].memory_limit }}"
              - name: SPRING_CONFIG_LOCATION
                value: "classpath:/application.yml,/app/config/application.yml"
              envFrom:
              - configMapRef:
                  name: "{{ ims_deployment_app_name }}-config"
              - secretRef:
                  name: "{{ ims_deployment_app_name }}-secret"
              resources:
                requests:
                  cpu: "{{ ims_deployment_resource_specs[ims_deployment_environment].cpu_request }}"
                  memory: "{{ ims_deployment_resource_specs[ims_deployment_environment].memory_request }}"
                limits:
                  cpu: "{{ ims_deployment_resource_specs[ims_deployment_environment].cpu_limit }}"
                  memory: "{{ ims_deployment_resource_specs[ims_deployment_environment].memory_limit }}"
              volumeMounts:
              - name: config-volume
                mountPath: /app/config
                readOnly: true
              - name: secret-volume
                mountPath: /app/secrets
                readOnly: true
              livenessProbe:
                httpGet:
                  path: "{{ ims_deployment_probes.liveness.http_get.path }}"
                  port: "{{ ims_deployment_probes.liveness.http_get.port }}"
                initialDelaySeconds: "{{ ims_deployment_probes.liveness.initial_delay_seconds }}"
                periodSeconds: "{{ ims_deployment_probes.liveness.period_seconds }}"
                timeoutSeconds: "{{ ims_deployment_probes.liveness.timeout_seconds }}"
                failureThreshold: "{{ ims_deployment_probes.liveness.failure_threshold }}"
              readinessProbe:
                httpGet:
                  path: "{{ ims_deployment_probes.readiness.http_get.path }}"
                  port: "{{ ims_deployment_probes.readiness.http_get.port }}"
                initialDelaySeconds: "{{ ims_deployment_probes.readiness.initial_delay_seconds }}"
                periodSeconds: "{{ ims_deployment_probes.readiness.period_seconds }}"
                timeoutSeconds: "{{ ims_deployment_probes.readiness.timeout_seconds }}"
                failureThreshold: "{{ ims_deployment_probes.readiness.failure_threshold }}"
            volumes:
            - name: config-volume
              configMap:
                name: "{{ ims_deployment_app_name }}-config"
            - name: secret-volume
              secret:
                secretName: "{{ ims_deployment_app_name }}-secret"
                defaultMode: 0400
  register: ims_deployment_result

- name: "Display deployment creation status"
  ansible.builtin.debug:
    msg: |
      Deployment {{ ims_deployment_app_name }}: {{ 'Updated' if ims_deployment_result.changed else 'No changes' }}
      Target replicas: {{ ims_deployment_resource_specs[ims_deployment_environment].replicas }}
    verbosity: 1