#!/usr/bin/env bash
# If the script is invoked from a shell that is *not* Bash (e.g. zsh),
# re‑exec it under Bash so that Bash‑specific array semantics apply.
[[ -z ${BASH_VERSION-} ]] && exec bash "$0" "$@"

#
# generate_scaffold.sh
# --------------------
# Build a repo from an ASCII-tree scaffold, document it, and commit.
#
# This script parses a text file representing a directory tree, creates the
# specified directories and files, generates a markdown file documenting the
# structure, populates a .gitignore based on comments in the scaffold, and
# finally, initializes a git repository and creates an initial commit.
#
# Usage:
#    ./generate_scaffold.sh [scaffold_file]
#    cat scaffold.txt | ./generate_scaffold.sh
#

set -euo pipefail

########################################
# 0. Configuration & Helpers
########################################
DEBUG=${DEBUG:-0}
indent_unit=4 # tree output uses 4-space blocks

log() { [ "$DEBUG" -eq 1 ] && echo ">> $*" >&2; }
trim() { sed -E 's/^[[:space:]]+|[[:space:]]+$//g'; }

########################################
# 1. Read scaffold (stdin or file arg)
########################################
if [ $# -gt 1 ]; then
  echo "Usage: $0 [scaffold_file]" >&2
  exit 1
fi

scaffold_source="${1:--}"

if [[ "$scaffold_source" != "-" && ! -r "$scaffold_source" ]]; then
  echo "Error: Scaffold file not found or not readable: $scaffold_source" >&2
  exit 1
fi

scaffold=$(cat "$scaffold_source" 2>/dev/null)

if [ -z "$scaffold" ]; then
  echo "Error: Scaffold is empty." >&2
  exit 1
fi

########################################
# 2. Prep Working Vars
########################################
declare -a stack=()
ignore_paths_str=""

########################################
# 3. First pass: create dirs/files & build .gitignore entries
########################################
while IFS= read -r raw; do
  [[ "$raw" =~ ^[[:space:]]*\.$ ]] && continue
  [ -z "$raw" ] && continue

  path_part="${raw%%#*}"
  comment_part="$([ "$raw" == *'#'* ] && echo "${raw#*#}" | trim || echo "")"

  marker_pos=$(echo "$path_part" | grep -abo "── " | head -n1 | cut -d: -f1 || true)
  [ -z "$marker_pos" ] && continue

  prefix=${path_part:0:$marker_pos}
  prefix=${prefix//│/}
  depth=$((${#prefix} / indent_unit))

  basename=$(echo "${path_part:$marker_pos+3}" | trim)
  [ "$basename" = "..." ] && continue

  # Temporarily disable nounset for empty‑array slice (zsh safe)
  set +u
  if [ ${#stack[@]} -gt 0 ] && [ $depth -lt ${#stack[@]} ]; then
    stack=("${stack[@]:0:$depth}")
  elif [ $depth -eq 0 ]; then
    stack=()
  fi
  set -u

  parent_path=$(printf '%s/' "${stack[@]}")
  full_path="${parent_path}${basename}"

  log "Depth=$depth Stack=(${stack[*]}) Path=$full_path"

  if [[ "$basename" == */ ]]; then
    dir_to_create="${full_path%/}"
    mkdir -p "$dir_to_create"
    stack+=("${basename%/}")
  else
    parent_dir_of_file=$(dirname "$full_path")
    if [ "$parent_dir_of_file" != "." ]; then
      mkdir -p "$parent_dir_of_file"
    fi
    touch "$full_path"
  fi

  if [[ "$basename" == ".gitignore" ]] && [[ "$comment_part" == Excludes* ]]; then
    extras=${comment_part#Excludes }
    for e in $(echo "$extras" | tr ',' ' '); do
      ignore_paths_str+="$(echo "$e" | trim)\n"
    done
  fi
  if [[ "$comment_part" == *"git-ignored"* ]]; then
    path_to_ignore="${full_path%/}"
    [[ "$basename" == */ ]] && path_to_ignore+="/"
    ignore_paths_str+="$path_to_ignore\n"
  fi
done <<<"$scaffold"

########################################
# 4. Ensure specs/structure.md exists
########################################
if [ ! -d "specs" ]; then
  mkdir "specs"
  log "Created missing specs/ directory"
fi

{
  echo '```text'
  echo "$scaffold"
  echo '```'
} >"specs/structure.md"

########################################
# 5. Build (or append to) .gitignore
########################################
root_gitignore=".gitignore"
touch "$root_gitignore"

if [ -n "$ignore_paths_str" ]; then
  {
    printf "\n# Auto-generated by generate_scaffold.sh\n"
    printf "%b" "$ignore_paths_str" | grep -v "^\s*$" | sort -u
  } >>"$root_gitignore"
fi

########################################
# 6. Git Initialise & Commit
########################################
if [ ! -d ".git" ]; then
  git init -b main >/dev/null
fi
git add .
git commit -m "feat: initial repository scaffold" >/dev/null

echo "✔ Repository scaffold created and committed."
